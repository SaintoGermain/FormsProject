@using FormsProyect.ViewModels
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Form Making";
}
@model FormViewModel
<link rel="stylesheet" href="~/css/tagify.css">
<script src="~/js/tagify.js"></script>
<h2>Edit Form</h2>

<form asp-controller="Home" asp-action="EditForm">
    <input type="hidden" name="NoForm" value="@Model.NoForm"/>
    <div class="form-group">
        <label asp-for="Title">Form Title</label>
        <input asp-for="Title" class="form-control" />
    </div>

    <div class="form-group">
        <label asp-for="Description">Description</label>
        <textarea asp-for="Description" class="form-control"></textarea>
    </div>

    <hr />

    <div class="form-group mb-4">
        <label asp-for="SelectedTopicId">Topic:</label>
        <select asp-for="SelectedTopicId" asp-items="@(new SelectList(Model.Topics, "TopicID", "_TopicName"))" class="form-control" required>
            <option value="">-- Select a Topic --</option>
        </select>
    </div>

    <hr />

    <div class="form-group mb-4">
        <label for="TagsEdit">Tags</label>
        <input id="TagsEdit" asp-for="Tags" class="form-control" placeholder="Add tags..." required/>
    </div>
    <hr />
    <label>Public Template</label>
    <input type="checkbox" id="IsPublic" name="IsPublic" asp-for="IsPublic" value="true" onclick="toggleAllowedUsers()" />
    <div id="allowed-users-group" class="form-group mb-4" style="display: none;">
        <label asp-for="AllowedUsers">Allowed Users</label>
        <input asp-for="AllowedUsers" class="form-control" placeholder="Add users by name or email" />
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var input = document.querySelector('#TagsEdit');

            var existingTags = @Html.Raw(Json.Serialize(Model.TagsEdit));
            var listTagsTable = @Html.Raw(JsonConvert.SerializeObject(Model.TagsL));

            var tagify = new Tagify(input, {
                delimiters: " ",
                whitelist: listTagsTable,
                maxTags: 10,
                dropdown: {
                    enabled: 1,
                    maxItems: 10,
                }
            });

            tagify.addTags(existingTags);
        });
    </script>
    @* <script>
        document.addEventListener('DOMContentLoaded', function () {
            const input = document.querySelector('#AllowedUsers');

            // Obtener el valor del input de búsqueda (query)
            input.addEventListener('input', function () {
                const query = input.value;  // Obtener el valor actual del input

                // Llamada a la API para obtener los usuarios
                fetch(`/Forms/SearchUsers?query=${encodeURIComponent(query)}`)
                    .then(response => response.json())  // Convierte la respuesta en JSON
                    .then(data => {
                        console.log('Usuarios recibidos:', data);
                        if (input.tagify) {
                            input.tagify.destroy();
                        }
                        // Inicializa Tagify con los usuarios obtenidos
                        const tagify = new Tagify(input, {
                            delimiters: " ",
                            enforceWhitelist: true,
                            whitelist: data.map(user => ({
                                value: `${user.Name} (${user.Email})`,  // Formato: Nombre (Email)
                                name: user.Name,
                                email: user.Email
                            })),
                            dropdown: {
                                enabled: 1,
                                position: "text",
                            },
                        });

                        // Manejo de selección de usuarios
                        tagify.on('add', function (e) {
                            const selected = e.detail.data;
                            console.log(`Usuario seleccionado: ${selected.value}`);
                        });
                    })
                    .catch(error => console.error('Error fetching users:', error)); // Manejo de errores
            });
        });
    </script> *@
    <script>
        function toggleAllowedUsers() {
            const isPublic = document.getElementById("IsPublic").checked;
            const allowedUsersGroup = document.getElementById("allowed-users-group");

            if (isPublic) {
                allowedUsersGroup.style.display = "none"; // Oculta el campo
            } else {
                allowedUsersGroup.style.display = "block"; // Muestra el campo
            }
        }

        // Inicializar visibilidad al cargar la página
        document.addEventListener("DOMContentLoaded", toggleAllowedUsers);
    </script>
    <button class="row-cols-5" type="submit">Next</button>
</form>
